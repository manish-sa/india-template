// Package oapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.14.0 DO NOT EDIT.
package oapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9RUT2/bPgz9KgJ/v6Nnp+tOvq1bMRTYIViPQQ6MTbsqbEmT5HZG4e8+UP4Tx3GRHjpg",
	"uyS2/Eg98pHvBTJdG61IeQfpC7jsgWoMj7e1qXRLxM/GakPWSwpfZM6/vjUEKUjlqSQLXQQKa5p9cd5K",
	"VULXRWDpZyMt5ZDuetQ+GlH68EiZ5/Bba7X9Qc5o5VZuzdHjLDtaiy2H1eQcliFAeqrdCoPoLMg1WUZu",
	"jj1oXRGqM7oj8nhR1FNZK2GrVfl14LnomSr05d4E1GuJL7fmf0sFpPBfchQ1GRRNJmpcvUffuMt0Btwa",
	"IWKx/k2RjFTlh/z9VWLYmCAnl1lpvNQKUvi8vRMlenrGVhTaiu/aeaELkVUoa1EdMuHIPsmMaXvpK846",
	"Yg5YlljSgD3insi6PvtVvIk3XJg2pNBISOE63sTXEIFB/xAKS2jY5vBmtPP8z6Ujc7zLIYV7fKJp6fuK",
	"yfkbnbeMzbTypEIYGlPJLAQmj445jMZxaQin9N1pT71tKBz0Ex5Iftxc/aF7T8X5Ygk95UFl19Q12nY6",
	"FSgUPQs6hkeQ8Pz0zF5zzqWRDdTiOInjZCwyCSsUt3W1dI51OF+bTLM7j/uLjIGBJfnzFeBbIFpM3Dfy",
	"WxnOF8pv3k35k/6sqH/fO0fRVGLixp349CYO9AtrU9Gx1bv9zOt2Y/v2My8rsHI8628c3JNRWuF/g7kY",
	"NnUxwdteOD4jy24B6e4FGltBCgnbRLfvfgcAAP//k0whMP8HAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
